// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="bubble_sort,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.908000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=317,HLS_SYN_LUT=493}" *)

module bubble_sort (
        ap_clk,
        ap_rst_n,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_st1_fsm_0 = 46'b1;
parameter    ap_ST_st2_fsm_1 = 46'b10;
parameter    ap_ST_st3_fsm_2 = 46'b100;
parameter    ap_ST_st4_fsm_3 = 46'b1000;
parameter    ap_ST_st5_fsm_4 = 46'b10000;
parameter    ap_ST_st6_fsm_5 = 46'b100000;
parameter    ap_ST_st7_fsm_6 = 46'b1000000;
parameter    ap_ST_st8_fsm_7 = 46'b10000000;
parameter    ap_ST_st9_fsm_8 = 46'b100000000;
parameter    ap_ST_st10_fsm_9 = 46'b1000000000;
parameter    ap_ST_st11_fsm_10 = 46'b10000000000;
parameter    ap_ST_st12_fsm_11 = 46'b100000000000;
parameter    ap_ST_st13_fsm_12 = 46'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 46'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 46'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 46'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 46'b10000000000000000;
parameter    ap_ST_st18_fsm_17 = 46'b100000000000000000;
parameter    ap_ST_st19_fsm_18 = 46'b1000000000000000000;
parameter    ap_ST_st20_fsm_19 = 46'b10000000000000000000;
parameter    ap_ST_st21_fsm_20 = 46'b100000000000000000000;
parameter    ap_ST_st22_fsm_21 = 46'b1000000000000000000000;
parameter    ap_ST_st23_fsm_22 = 46'b10000000000000000000000;
parameter    ap_ST_st24_fsm_23 = 46'b100000000000000000000000;
parameter    ap_ST_st25_fsm_24 = 46'b1000000000000000000000000;
parameter    ap_ST_st26_fsm_25 = 46'b10000000000000000000000000;
parameter    ap_ST_st27_fsm_26 = 46'b100000000000000000000000000;
parameter    ap_ST_st28_fsm_27 = 46'b1000000000000000000000000000;
parameter    ap_ST_st29_fsm_28 = 46'b10000000000000000000000000000;
parameter    ap_ST_st30_fsm_29 = 46'b100000000000000000000000000000;
parameter    ap_ST_st31_fsm_30 = 46'b1000000000000000000000000000000;
parameter    ap_ST_st32_fsm_31 = 46'b10000000000000000000000000000000;
parameter    ap_ST_st33_fsm_32 = 46'b100000000000000000000000000000000;
parameter    ap_ST_st34_fsm_33 = 46'b1000000000000000000000000000000000;
parameter    ap_ST_st35_fsm_34 = 46'b10000000000000000000000000000000000;
parameter    ap_ST_st36_fsm_35 = 46'b100000000000000000000000000000000000;
parameter    ap_ST_st37_fsm_36 = 46'b1000000000000000000000000000000000000;
parameter    ap_ST_st38_fsm_37 = 46'b10000000000000000000000000000000000000;
parameter    ap_ST_st39_fsm_38 = 46'b100000000000000000000000000000000000000;
parameter    ap_ST_st40_fsm_39 = 46'b1000000000000000000000000000000000000000;
parameter    ap_ST_st41_fsm_40 = 46'b10000000000000000000000000000000000000000;
parameter    ap_ST_st42_fsm_41 = 46'b100000000000000000000000000000000000000000;
parameter    ap_ST_st43_fsm_42 = 46'b1000000000000000000000000000000000000000000;
parameter    ap_ST_st44_fsm_43 = 46'b10000000000000000000000000000000000000000000;
parameter    ap_ST_st45_fsm_44 = 46'b100000000000000000000000000000000000000000000;
parameter    ap_ST_st46_fsm_45 = 46'b1000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 10;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv32_15 = 32'b10101;
parameter    ap_const_lv32_16 = 32'b10110;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv32_19 = 32'b11001;
parameter    ap_const_lv32_1A = 32'b11010;
parameter    ap_const_lv32_1B = 32'b11011;
parameter    ap_const_lv32_1C = 32'b11100;
parameter    ap_const_lv32_1D = 32'b11101;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_20 = 32'b100000;
parameter    ap_const_lv32_21 = 32'b100001;
parameter    ap_const_lv32_22 = 32'b100010;
parameter    ap_const_lv32_23 = 32'b100011;
parameter    ap_const_lv32_24 = 32'b100100;
parameter    ap_const_lv32_25 = 32'b100101;
parameter    ap_const_lv32_26 = 32'b100110;
parameter    ap_const_lv32_27 = 32'b100111;
parameter    ap_const_lv32_29 = 32'b101001;
parameter    ap_const_lv32_2A = 32'b101010;
parameter    ap_const_lv32_2B = 32'b101011;
parameter    ap_const_lv32_2C = 32'b101100;
parameter    ap_const_lv6_27 = 6'b100111;
parameter    ap_const_lv32_28 = 32'b101000;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv32_2D = 32'b101101;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv64_1 = 64'b1;
parameter    ap_const_lv64_2 = 64'b10;
parameter    ap_const_lv64_3 = 64'b11;
parameter    ap_const_lv64_4 = 64'b100;
parameter    ap_const_lv64_5 = 64'b101;
parameter    ap_const_lv64_6 = 64'b110;
parameter    ap_const_lv64_7 = 64'b111;
parameter    ap_const_lv64_8 = 64'b1000;
parameter    ap_const_lv64_9 = 64'b1001;
parameter    ap_const_lv64_A = 64'b1010;
parameter    ap_const_lv64_B = 64'b1011;
parameter    ap_const_lv64_C = 64'b1100;
parameter    ap_const_lv64_D = 64'b1101;
parameter    ap_const_lv64_E = 64'b1110;
parameter    ap_const_lv64_F = 64'b1111;
parameter    ap_const_lv64_10 = 64'b10000;
parameter    ap_const_lv64_11 = 64'b10001;
parameter    ap_const_lv64_12 = 64'b10010;
parameter    ap_const_lv64_13 = 64'b10011;
parameter    ap_const_lv64_14 = 64'b10100;
parameter    ap_const_lv64_15 = 64'b10101;
parameter    ap_const_lv64_16 = 64'b10110;
parameter    ap_const_lv64_17 = 64'b10111;
parameter    ap_const_lv64_18 = 64'b11000;
parameter    ap_const_lv64_19 = 64'b11001;
parameter    ap_const_lv64_1A = 64'b11010;
parameter    ap_const_lv64_1B = 64'b11011;
parameter    ap_const_lv64_1C = 64'b11100;
parameter    ap_const_lv64_1D = 64'b11101;
parameter    ap_const_lv64_1E = 64'b11110;
parameter    ap_const_lv64_1F = 64'b11111;
parameter    ap_const_lv64_20 = 64'b100000;
parameter    ap_const_lv64_21 = 64'b100001;
parameter    ap_const_lv64_22 = 64'b100010;
parameter    ap_const_lv64_23 = 64'b100011;
parameter    ap_const_lv64_24 = 64'b100100;
parameter    ap_const_lv64_25 = 64'b100101;
parameter    ap_const_lv64_26 = 64'b100110;
parameter    ap_const_lv64_27 = 64'b100111;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_const_lv6_3F = 6'b111111;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (C_S_AXI_AXILITES_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1 : 0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [45:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_63;
reg    ap_ready;
reg   [5:0] array_r_address0;
reg    array_r_ce0;
wire   [31:0] array_r_q0;
reg   [5:0] array_out_address0;
reg    array_out_ce0;
reg    array_out_we0;
reg   [31:0] array_out_d0;
wire   [31:0] array_out_q0;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_130;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_139;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_148;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_157;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_166;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_175;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_184;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_193;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_202;
reg    ap_sig_cseq_ST_st11_fsm_10;
reg    ap_sig_211;
reg    ap_sig_cseq_ST_st12_fsm_11;
reg    ap_sig_220;
reg    ap_sig_cseq_ST_st13_fsm_12;
reg    ap_sig_229;
reg    ap_sig_cseq_ST_st14_fsm_13;
reg    ap_sig_238;
reg    ap_sig_cseq_ST_st15_fsm_14;
reg    ap_sig_247;
reg    ap_sig_cseq_ST_st16_fsm_15;
reg    ap_sig_256;
reg    ap_sig_cseq_ST_st17_fsm_16;
reg    ap_sig_265;
reg    ap_sig_cseq_ST_st18_fsm_17;
reg    ap_sig_274;
reg    ap_sig_cseq_ST_st19_fsm_18;
reg    ap_sig_283;
reg    ap_sig_cseq_ST_st20_fsm_19;
reg    ap_sig_292;
reg    ap_sig_cseq_ST_st21_fsm_20;
reg    ap_sig_301;
reg    ap_sig_cseq_ST_st22_fsm_21;
reg    ap_sig_310;
reg    ap_sig_cseq_ST_st23_fsm_22;
reg    ap_sig_319;
reg    ap_sig_cseq_ST_st24_fsm_23;
reg    ap_sig_328;
reg    ap_sig_cseq_ST_st25_fsm_24;
reg    ap_sig_337;
reg    ap_sig_cseq_ST_st26_fsm_25;
reg    ap_sig_346;
reg    ap_sig_cseq_ST_st27_fsm_26;
reg    ap_sig_355;
reg    ap_sig_cseq_ST_st28_fsm_27;
reg    ap_sig_364;
reg    ap_sig_cseq_ST_st29_fsm_28;
reg    ap_sig_373;
reg    ap_sig_cseq_ST_st30_fsm_29;
reg    ap_sig_382;
reg    ap_sig_cseq_ST_st31_fsm_30;
reg    ap_sig_391;
reg    ap_sig_cseq_ST_st32_fsm_31;
reg    ap_sig_400;
reg    ap_sig_cseq_ST_st33_fsm_32;
reg    ap_sig_409;
reg    ap_sig_cseq_ST_st34_fsm_33;
reg    ap_sig_418;
reg    ap_sig_cseq_ST_st35_fsm_34;
reg    ap_sig_427;
reg    ap_sig_cseq_ST_st36_fsm_35;
reg    ap_sig_436;
reg    ap_sig_cseq_ST_st37_fsm_36;
reg    ap_sig_445;
reg    ap_sig_cseq_ST_st38_fsm_37;
reg    ap_sig_454;
reg    ap_sig_cseq_ST_st39_fsm_38;
reg    ap_sig_463;
reg    ap_sig_cseq_ST_st40_fsm_39;
reg    ap_sig_472;
wire   [5:0] i_1_fu_912_p2;
reg   [5:0] i_1_reg_1153;
reg    ap_sig_cseq_ST_st42_fsm_41;
reg    ap_sig_481;
wire   [5:0] j_1_fu_924_p2;
reg   [5:0] j_1_reg_1161;
reg    ap_sig_cseq_ST_st43_fsm_42;
reg    ap_sig_490;
reg   [5:0] array_out_addr_16_reg_1167;
wire   [0:0] exitcond_fu_918_p2;
wire   [5:0] indvars_iv_next_fu_935_p2;
reg   [31:0] temporal_reg_1177;
reg    ap_sig_cseq_ST_st44_fsm_43;
reg    ap_sig_508;
reg   [5:0] array_out_addr_28_reg_1183;
wire   [0:0] tmp_6_fu_945_p2;
reg   [0:0] tmp_6_reg_1188;
reg    ap_sig_cseq_ST_st45_fsm_44;
reg    ap_sig_519;
reg   [5:0] indvars_iv_reg_872;
reg    ap_sig_cseq_ST_st41_fsm_40;
reg    ap_sig_529;
reg   [5:0] i_reg_884;
reg   [5:0] j_reg_895;
wire   [0:0] exitcond1_fu_906_p2;
reg    ap_sig_cseq_ST_st46_fsm_45;
reg    ap_sig_544;
wire   [63:0] tmp_3_fu_930_p1;
wire   [63:0] tmp_5_fu_941_p1;
reg   [45:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 46'b1;
end

bubble_sort_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
bubble_sort_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .array_r_address0(array_r_address0),
    .array_r_ce0(array_r_ce0),
    .array_r_q0(array_r_q0),
    .array_out_address0(array_out_address0),
    .array_out_ce0(array_out_ce0),
    .array_out_we0(array_out_we0),
    .array_out_d0(array_out_d0),
    .array_out_q0(array_out_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st41_fsm_40)) begin
        i_reg_884 <= ap_const_lv6_0;
    end else if (((1'b1 == ap_sig_cseq_ST_st43_fsm_42) & ~(exitcond_fu_918_p2 == 1'b0))) begin
        i_reg_884 <= i_1_reg_1153;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st41_fsm_40)) begin
        indvars_iv_reg_872 <= ap_const_lv6_27;
    end else if (((1'b1 == ap_sig_cseq_ST_st43_fsm_42) & ~(exitcond_fu_918_p2 == 1'b0))) begin
        indvars_iv_reg_872 <= indvars_iv_next_fu_935_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st46_fsm_45)) begin
        j_reg_895 <= j_1_reg_1161;
    end else if (((1'b1 == ap_sig_cseq_ST_st42_fsm_41) & (1'b0 == exitcond1_fu_906_p2))) begin
        j_reg_895 <= ap_const_lv6_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st43_fsm_42) & (exitcond_fu_918_p2 == 1'b0))) begin
        array_out_addr_16_reg_1167 <= tmp_3_fu_930_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st44_fsm_43)) begin
        array_out_addr_28_reg_1183 <= tmp_5_fu_941_p1;
        temporal_reg_1177 <= array_out_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st42_fsm_41)) begin
        i_1_reg_1153 <= i_1_fu_912_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st43_fsm_42)) begin
        j_1_reg_1161 <= j_1_fu_924_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st45_fsm_44)) begin
        tmp_6_reg_1188 <= tmp_6_fu_945_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st42_fsm_41) & ~(1'b0 == exitcond1_fu_906_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st42_fsm_41) & ~(1'b0 == exitcond1_fu_906_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_202) begin
        ap_sig_cseq_ST_st10_fsm_9 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_211) begin
        ap_sig_cseq_ST_st11_fsm_10 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_10 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_220) begin
        ap_sig_cseq_ST_st12_fsm_11 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st12_fsm_11 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_229) begin
        ap_sig_cseq_ST_st13_fsm_12 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st13_fsm_12 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_238) begin
        ap_sig_cseq_ST_st14_fsm_13 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st14_fsm_13 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_247) begin
        ap_sig_cseq_ST_st15_fsm_14 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st15_fsm_14 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_256) begin
        ap_sig_cseq_ST_st16_fsm_15 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st16_fsm_15 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_265) begin
        ap_sig_cseq_ST_st17_fsm_16 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st17_fsm_16 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_274) begin
        ap_sig_cseq_ST_st18_fsm_17 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st18_fsm_17 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_283) begin
        ap_sig_cseq_ST_st19_fsm_18 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st19_fsm_18 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_63) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_292) begin
        ap_sig_cseq_ST_st20_fsm_19 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st20_fsm_19 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_301) begin
        ap_sig_cseq_ST_st21_fsm_20 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st21_fsm_20 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_310) begin
        ap_sig_cseq_ST_st22_fsm_21 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st22_fsm_21 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_319) begin
        ap_sig_cseq_ST_st23_fsm_22 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st23_fsm_22 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_328) begin
        ap_sig_cseq_ST_st24_fsm_23 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st24_fsm_23 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_337) begin
        ap_sig_cseq_ST_st25_fsm_24 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st25_fsm_24 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_346) begin
        ap_sig_cseq_ST_st26_fsm_25 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st26_fsm_25 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_355) begin
        ap_sig_cseq_ST_st27_fsm_26 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st27_fsm_26 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_364) begin
        ap_sig_cseq_ST_st28_fsm_27 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st28_fsm_27 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_373) begin
        ap_sig_cseq_ST_st29_fsm_28 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st29_fsm_28 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_130) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_382) begin
        ap_sig_cseq_ST_st30_fsm_29 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st30_fsm_29 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_391) begin
        ap_sig_cseq_ST_st31_fsm_30 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st31_fsm_30 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_400) begin
        ap_sig_cseq_ST_st32_fsm_31 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st32_fsm_31 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_409) begin
        ap_sig_cseq_ST_st33_fsm_32 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st33_fsm_32 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_418) begin
        ap_sig_cseq_ST_st34_fsm_33 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st34_fsm_33 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_427) begin
        ap_sig_cseq_ST_st35_fsm_34 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st35_fsm_34 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_436) begin
        ap_sig_cseq_ST_st36_fsm_35 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st36_fsm_35 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_445) begin
        ap_sig_cseq_ST_st37_fsm_36 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st37_fsm_36 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_454) begin
        ap_sig_cseq_ST_st38_fsm_37 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st38_fsm_37 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_463) begin
        ap_sig_cseq_ST_st39_fsm_38 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st39_fsm_38 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_139) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_472) begin
        ap_sig_cseq_ST_st40_fsm_39 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st40_fsm_39 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_529) begin
        ap_sig_cseq_ST_st41_fsm_40 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st41_fsm_40 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_481) begin
        ap_sig_cseq_ST_st42_fsm_41 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st42_fsm_41 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_490) begin
        ap_sig_cseq_ST_st43_fsm_42 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st43_fsm_42 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_508) begin
        ap_sig_cseq_ST_st44_fsm_43 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st44_fsm_43 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_519) begin
        ap_sig_cseq_ST_st45_fsm_44 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st45_fsm_44 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_544) begin
        ap_sig_cseq_ST_st46_fsm_45 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st46_fsm_45 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_148) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_157) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_166) begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_175) begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_184) begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_193) begin
        ap_sig_cseq_ST_st9_fsm_8 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st46_fsm_45)) begin
        array_out_address0 = array_out_addr_28_reg_1183;
    end else if ((1'b1 == ap_sig_cseq_ST_st45_fsm_44)) begin
        array_out_address0 = array_out_addr_16_reg_1167;
    end else if ((1'b1 == ap_sig_cseq_ST_st41_fsm_40)) begin
        array_out_address0 = ap_const_lv64_27;
    end else if ((1'b1 == ap_sig_cseq_ST_st40_fsm_39)) begin
        array_out_address0 = ap_const_lv64_26;
    end else if ((1'b1 == ap_sig_cseq_ST_st39_fsm_38)) begin
        array_out_address0 = ap_const_lv64_25;
    end else if ((1'b1 == ap_sig_cseq_ST_st38_fsm_37)) begin
        array_out_address0 = ap_const_lv64_24;
    end else if ((1'b1 == ap_sig_cseq_ST_st37_fsm_36)) begin
        array_out_address0 = ap_const_lv64_23;
    end else if ((1'b1 == ap_sig_cseq_ST_st36_fsm_35)) begin
        array_out_address0 = ap_const_lv64_22;
    end else if ((1'b1 == ap_sig_cseq_ST_st35_fsm_34)) begin
        array_out_address0 = ap_const_lv64_21;
    end else if ((1'b1 == ap_sig_cseq_ST_st34_fsm_33)) begin
        array_out_address0 = ap_const_lv64_20;
    end else if ((1'b1 == ap_sig_cseq_ST_st33_fsm_32)) begin
        array_out_address0 = ap_const_lv64_1F;
    end else if ((1'b1 == ap_sig_cseq_ST_st32_fsm_31)) begin
        array_out_address0 = ap_const_lv64_1E;
    end else if ((1'b1 == ap_sig_cseq_ST_st31_fsm_30)) begin
        array_out_address0 = ap_const_lv64_1D;
    end else if ((1'b1 == ap_sig_cseq_ST_st30_fsm_29)) begin
        array_out_address0 = ap_const_lv64_1C;
    end else if ((1'b1 == ap_sig_cseq_ST_st29_fsm_28)) begin
        array_out_address0 = ap_const_lv64_1B;
    end else if ((1'b1 == ap_sig_cseq_ST_st28_fsm_27)) begin
        array_out_address0 = ap_const_lv64_1A;
    end else if ((1'b1 == ap_sig_cseq_ST_st27_fsm_26)) begin
        array_out_address0 = ap_const_lv64_19;
    end else if ((1'b1 == ap_sig_cseq_ST_st26_fsm_25)) begin
        array_out_address0 = ap_const_lv64_18;
    end else if ((1'b1 == ap_sig_cseq_ST_st25_fsm_24)) begin
        array_out_address0 = ap_const_lv64_17;
    end else if ((1'b1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        array_out_address0 = ap_const_lv64_16;
    end else if ((1'b1 == ap_sig_cseq_ST_st23_fsm_22)) begin
        array_out_address0 = ap_const_lv64_15;
    end else if ((1'b1 == ap_sig_cseq_ST_st22_fsm_21)) begin
        array_out_address0 = ap_const_lv64_14;
    end else if ((1'b1 == ap_sig_cseq_ST_st21_fsm_20)) begin
        array_out_address0 = ap_const_lv64_13;
    end else if ((1'b1 == ap_sig_cseq_ST_st20_fsm_19)) begin
        array_out_address0 = ap_const_lv64_12;
    end else if ((1'b1 == ap_sig_cseq_ST_st19_fsm_18)) begin
        array_out_address0 = ap_const_lv64_11;
    end else if ((1'b1 == ap_sig_cseq_ST_st18_fsm_17)) begin
        array_out_address0 = ap_const_lv64_10;
    end else if ((1'b1 == ap_sig_cseq_ST_st17_fsm_16)) begin
        array_out_address0 = ap_const_lv64_F;
    end else if ((1'b1 == ap_sig_cseq_ST_st16_fsm_15)) begin
        array_out_address0 = ap_const_lv64_E;
    end else if ((1'b1 == ap_sig_cseq_ST_st15_fsm_14)) begin
        array_out_address0 = ap_const_lv64_D;
    end else if ((1'b1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        array_out_address0 = ap_const_lv64_C;
    end else if ((1'b1 == ap_sig_cseq_ST_st13_fsm_12)) begin
        array_out_address0 = ap_const_lv64_B;
    end else if ((1'b1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        array_out_address0 = ap_const_lv64_A;
    end else if ((1'b1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        array_out_address0 = ap_const_lv64_9;
    end else if ((1'b1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        array_out_address0 = ap_const_lv64_8;
    end else if ((1'b1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        array_out_address0 = ap_const_lv64_7;
    end else if ((1'b1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        array_out_address0 = ap_const_lv64_6;
    end else if ((1'b1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        array_out_address0 = ap_const_lv64_5;
    end else if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        array_out_address0 = ap_const_lv64_4;
    end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        array_out_address0 = ap_const_lv64_3;
    end else if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        array_out_address0 = ap_const_lv64_2;
    end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        array_out_address0 = ap_const_lv64_1;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        array_out_address0 = ap_const_lv64_0;
    end else if ((1'b1 == ap_sig_cseq_ST_st44_fsm_43)) begin
        array_out_address0 = tmp_5_fu_941_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st43_fsm_42)) begin
        array_out_address0 = tmp_3_fu_930_p1;
    end else begin
        array_out_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st3_fsm_2) | (1'b1 == ap_sig_cseq_ST_st4_fsm_3) | (1'b1 == ap_sig_cseq_ST_st5_fsm_4) | (1'b1 == ap_sig_cseq_ST_st6_fsm_5) | (1'b1 == ap_sig_cseq_ST_st7_fsm_6) | (1'b1 == ap_sig_cseq_ST_st8_fsm_7) | (1'b1 == ap_sig_cseq_ST_st9_fsm_8) | (1'b1 == ap_sig_cseq_ST_st10_fsm_9) | (1'b1 == ap_sig_cseq_ST_st11_fsm_10) | (1'b1 == ap_sig_cseq_ST_st12_fsm_11) | (1'b1 == ap_sig_cseq_ST_st13_fsm_12) | (1'b1 == ap_sig_cseq_ST_st14_fsm_13) | (1'b1 == ap_sig_cseq_ST_st15_fsm_14) | (1'b1 == ap_sig_cseq_ST_st16_fsm_15) | (1'b1 == ap_sig_cseq_ST_st17_fsm_16) | (1'b1 == ap_sig_cseq_ST_st18_fsm_17) | (1'b1 == ap_sig_cseq_ST_st19_fsm_18) | (1'b1 == ap_sig_cseq_ST_st20_fsm_19) | (1'b1 == ap_sig_cseq_ST_st21_fsm_20) | (1'b1 == ap_sig_cseq_ST_st22_fsm_21) | (1'b1 == ap_sig_cseq_ST_st23_fsm_22) | (1'b1 == ap_sig_cseq_ST_st24_fsm_23) | (1'b1 == ap_sig_cseq_ST_st25_fsm_24) | (1'b1 == ap_sig_cseq_ST_st26_fsm_25) | (1'b1 == ap_sig_cseq_ST_st27_fsm_26) | (1'b1 == ap_sig_cseq_ST_st28_fsm_27) | (1'b1 == ap_sig_cseq_ST_st29_fsm_28) | (1'b1 == ap_sig_cseq_ST_st30_fsm_29) | (1'b1 == ap_sig_cseq_ST_st31_fsm_30) | (1'b1 == ap_sig_cseq_ST_st32_fsm_31) | (1'b1 == ap_sig_cseq_ST_st33_fsm_32) | (1'b1 == ap_sig_cseq_ST_st34_fsm_33) | (1'b1 == ap_sig_cseq_ST_st35_fsm_34) | (1'b1 == ap_sig_cseq_ST_st36_fsm_35) | (1'b1 == ap_sig_cseq_ST_st37_fsm_36) | (1'b1 == ap_sig_cseq_ST_st38_fsm_37) | (1'b1 == ap_sig_cseq_ST_st39_fsm_38) | (1'b1 == ap_sig_cseq_ST_st40_fsm_39) | (1'b1 == ap_sig_cseq_ST_st43_fsm_42) | (1'b1 == ap_sig_cseq_ST_st44_fsm_43) | (1'b1 == ap_sig_cseq_ST_st45_fsm_44) | (1'b1 == ap_sig_cseq_ST_st41_fsm_40) | (1'b1 == ap_sig_cseq_ST_st46_fsm_45))) begin
        array_out_ce0 = 1'b1;
    end else begin
        array_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st46_fsm_45)) begin
        array_out_d0 = temporal_reg_1177;
    end else if ((1'b1 == ap_sig_cseq_ST_st45_fsm_44)) begin
        array_out_d0 = array_out_q0;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st3_fsm_2) | (1'b1 == ap_sig_cseq_ST_st4_fsm_3) | (1'b1 == ap_sig_cseq_ST_st5_fsm_4) | (1'b1 == ap_sig_cseq_ST_st6_fsm_5) | (1'b1 == ap_sig_cseq_ST_st7_fsm_6) | (1'b1 == ap_sig_cseq_ST_st8_fsm_7) | (1'b1 == ap_sig_cseq_ST_st9_fsm_8) | (1'b1 == ap_sig_cseq_ST_st10_fsm_9) | (1'b1 == ap_sig_cseq_ST_st11_fsm_10) | (1'b1 == ap_sig_cseq_ST_st12_fsm_11) | (1'b1 == ap_sig_cseq_ST_st13_fsm_12) | (1'b1 == ap_sig_cseq_ST_st14_fsm_13) | (1'b1 == ap_sig_cseq_ST_st15_fsm_14) | (1'b1 == ap_sig_cseq_ST_st16_fsm_15) | (1'b1 == ap_sig_cseq_ST_st17_fsm_16) | (1'b1 == ap_sig_cseq_ST_st18_fsm_17) | (1'b1 == ap_sig_cseq_ST_st19_fsm_18) | (1'b1 == ap_sig_cseq_ST_st20_fsm_19) | (1'b1 == ap_sig_cseq_ST_st21_fsm_20) | (1'b1 == ap_sig_cseq_ST_st22_fsm_21) | (1'b1 == ap_sig_cseq_ST_st23_fsm_22) | (1'b1 == ap_sig_cseq_ST_st24_fsm_23) | (1'b1 == ap_sig_cseq_ST_st25_fsm_24) | (1'b1 == ap_sig_cseq_ST_st26_fsm_25) | (1'b1 == ap_sig_cseq_ST_st27_fsm_26) | (1'b1 == ap_sig_cseq_ST_st28_fsm_27) | (1'b1 == ap_sig_cseq_ST_st29_fsm_28) | (1'b1 == ap_sig_cseq_ST_st30_fsm_29) | (1'b1 == ap_sig_cseq_ST_st31_fsm_30) | (1'b1 == ap_sig_cseq_ST_st32_fsm_31) | (1'b1 == ap_sig_cseq_ST_st33_fsm_32) | (1'b1 == ap_sig_cseq_ST_st34_fsm_33) | (1'b1 == ap_sig_cseq_ST_st35_fsm_34) | (1'b1 == ap_sig_cseq_ST_st36_fsm_35) | (1'b1 == ap_sig_cseq_ST_st37_fsm_36) | (1'b1 == ap_sig_cseq_ST_st38_fsm_37) | (1'b1 == ap_sig_cseq_ST_st39_fsm_38) | (1'b1 == ap_sig_cseq_ST_st40_fsm_39) | (1'b1 == ap_sig_cseq_ST_st41_fsm_40))) begin
        array_out_d0 = array_r_q0;
    end else begin
        array_out_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st3_fsm_2) | (1'b1 == ap_sig_cseq_ST_st4_fsm_3) | (1'b1 == ap_sig_cseq_ST_st5_fsm_4) | (1'b1 == ap_sig_cseq_ST_st6_fsm_5) | (1'b1 == ap_sig_cseq_ST_st7_fsm_6) | (1'b1 == ap_sig_cseq_ST_st8_fsm_7) | (1'b1 == ap_sig_cseq_ST_st9_fsm_8) | (1'b1 == ap_sig_cseq_ST_st10_fsm_9) | (1'b1 == ap_sig_cseq_ST_st11_fsm_10) | (1'b1 == ap_sig_cseq_ST_st12_fsm_11) | (1'b1 == ap_sig_cseq_ST_st13_fsm_12) | (1'b1 == ap_sig_cseq_ST_st14_fsm_13) | (1'b1 == ap_sig_cseq_ST_st15_fsm_14) | (1'b1 == ap_sig_cseq_ST_st16_fsm_15) | (1'b1 == ap_sig_cseq_ST_st17_fsm_16) | (1'b1 == ap_sig_cseq_ST_st18_fsm_17) | (1'b1 == ap_sig_cseq_ST_st19_fsm_18) | (1'b1 == ap_sig_cseq_ST_st20_fsm_19) | (1'b1 == ap_sig_cseq_ST_st21_fsm_20) | (1'b1 == ap_sig_cseq_ST_st22_fsm_21) | (1'b1 == ap_sig_cseq_ST_st23_fsm_22) | (1'b1 == ap_sig_cseq_ST_st24_fsm_23) | (1'b1 == ap_sig_cseq_ST_st25_fsm_24) | (1'b1 == ap_sig_cseq_ST_st26_fsm_25) | (1'b1 == ap_sig_cseq_ST_st27_fsm_26) | (1'b1 == ap_sig_cseq_ST_st28_fsm_27) | (1'b1 == ap_sig_cseq_ST_st29_fsm_28) | (1'b1 == ap_sig_cseq_ST_st30_fsm_29) | (1'b1 == ap_sig_cseq_ST_st31_fsm_30) | (1'b1 == ap_sig_cseq_ST_st32_fsm_31) | (1'b1 == ap_sig_cseq_ST_st33_fsm_32) | (1'b1 == ap_sig_cseq_ST_st34_fsm_33) | (1'b1 == ap_sig_cseq_ST_st35_fsm_34) | (1'b1 == ap_sig_cseq_ST_st36_fsm_35) | (1'b1 == ap_sig_cseq_ST_st37_fsm_36) | (1'b1 == ap_sig_cseq_ST_st38_fsm_37) | (1'b1 == ap_sig_cseq_ST_st39_fsm_38) | (1'b1 == ap_sig_cseq_ST_st40_fsm_39) | (1'b1 == ap_sig_cseq_ST_st41_fsm_40) | ((1'b1 == ap_sig_cseq_ST_st45_fsm_44) & ~(1'b0 == tmp_6_fu_945_p2)) | ((1'b1 == ap_sig_cseq_ST_st46_fsm_45) & ~(1'b0 == tmp_6_reg_1188)))) begin
        array_out_we0 = 1'b1;
    end else begin
        array_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st40_fsm_39)) begin
        array_r_address0 = ap_const_lv64_27;
    end else if ((1'b1 == ap_sig_cseq_ST_st39_fsm_38)) begin
        array_r_address0 = ap_const_lv64_26;
    end else if ((1'b1 == ap_sig_cseq_ST_st38_fsm_37)) begin
        array_r_address0 = ap_const_lv64_25;
    end else if ((1'b1 == ap_sig_cseq_ST_st37_fsm_36)) begin
        array_r_address0 = ap_const_lv64_24;
    end else if ((1'b1 == ap_sig_cseq_ST_st36_fsm_35)) begin
        array_r_address0 = ap_const_lv64_23;
    end else if ((1'b1 == ap_sig_cseq_ST_st35_fsm_34)) begin
        array_r_address0 = ap_const_lv64_22;
    end else if ((1'b1 == ap_sig_cseq_ST_st34_fsm_33)) begin
        array_r_address0 = ap_const_lv64_21;
    end else if ((1'b1 == ap_sig_cseq_ST_st33_fsm_32)) begin
        array_r_address0 = ap_const_lv64_20;
    end else if ((1'b1 == ap_sig_cseq_ST_st32_fsm_31)) begin
        array_r_address0 = ap_const_lv64_1F;
    end else if ((1'b1 == ap_sig_cseq_ST_st31_fsm_30)) begin
        array_r_address0 = ap_const_lv64_1E;
    end else if ((1'b1 == ap_sig_cseq_ST_st30_fsm_29)) begin
        array_r_address0 = ap_const_lv64_1D;
    end else if ((1'b1 == ap_sig_cseq_ST_st29_fsm_28)) begin
        array_r_address0 = ap_const_lv64_1C;
    end else if ((1'b1 == ap_sig_cseq_ST_st28_fsm_27)) begin
        array_r_address0 = ap_const_lv64_1B;
    end else if ((1'b1 == ap_sig_cseq_ST_st27_fsm_26)) begin
        array_r_address0 = ap_const_lv64_1A;
    end else if ((1'b1 == ap_sig_cseq_ST_st26_fsm_25)) begin
        array_r_address0 = ap_const_lv64_19;
    end else if ((1'b1 == ap_sig_cseq_ST_st25_fsm_24)) begin
        array_r_address0 = ap_const_lv64_18;
    end else if ((1'b1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        array_r_address0 = ap_const_lv64_17;
    end else if ((1'b1 == ap_sig_cseq_ST_st23_fsm_22)) begin
        array_r_address0 = ap_const_lv64_16;
    end else if ((1'b1 == ap_sig_cseq_ST_st22_fsm_21)) begin
        array_r_address0 = ap_const_lv64_15;
    end else if ((1'b1 == ap_sig_cseq_ST_st21_fsm_20)) begin
        array_r_address0 = ap_const_lv64_14;
    end else if ((1'b1 == ap_sig_cseq_ST_st20_fsm_19)) begin
        array_r_address0 = ap_const_lv64_13;
    end else if ((1'b1 == ap_sig_cseq_ST_st19_fsm_18)) begin
        array_r_address0 = ap_const_lv64_12;
    end else if ((1'b1 == ap_sig_cseq_ST_st18_fsm_17)) begin
        array_r_address0 = ap_const_lv64_11;
    end else if ((1'b1 == ap_sig_cseq_ST_st17_fsm_16)) begin
        array_r_address0 = ap_const_lv64_10;
    end else if ((1'b1 == ap_sig_cseq_ST_st16_fsm_15)) begin
        array_r_address0 = ap_const_lv64_F;
    end else if ((1'b1 == ap_sig_cseq_ST_st15_fsm_14)) begin
        array_r_address0 = ap_const_lv64_E;
    end else if ((1'b1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        array_r_address0 = ap_const_lv64_D;
    end else if ((1'b1 == ap_sig_cseq_ST_st13_fsm_12)) begin
        array_r_address0 = ap_const_lv64_C;
    end else if ((1'b1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        array_r_address0 = ap_const_lv64_B;
    end else if ((1'b1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        array_r_address0 = ap_const_lv64_A;
    end else if ((1'b1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        array_r_address0 = ap_const_lv64_9;
    end else if ((1'b1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        array_r_address0 = ap_const_lv64_8;
    end else if ((1'b1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        array_r_address0 = ap_const_lv64_7;
    end else if ((1'b1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        array_r_address0 = ap_const_lv64_6;
    end else if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        array_r_address0 = ap_const_lv64_5;
    end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        array_r_address0 = ap_const_lv64_4;
    end else if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        array_r_address0 = ap_const_lv64_3;
    end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        array_r_address0 = ap_const_lv64_2;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        array_r_address0 = ap_const_lv64_1;
    end else if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        array_r_address0 = ap_const_lv64_0;
    end else begin
        array_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0)) | (1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st3_fsm_2) | (1'b1 == ap_sig_cseq_ST_st4_fsm_3) | (1'b1 == ap_sig_cseq_ST_st5_fsm_4) | (1'b1 == ap_sig_cseq_ST_st6_fsm_5) | (1'b1 == ap_sig_cseq_ST_st7_fsm_6) | (1'b1 == ap_sig_cseq_ST_st8_fsm_7) | (1'b1 == ap_sig_cseq_ST_st9_fsm_8) | (1'b1 == ap_sig_cseq_ST_st10_fsm_9) | (1'b1 == ap_sig_cseq_ST_st11_fsm_10) | (1'b1 == ap_sig_cseq_ST_st12_fsm_11) | (1'b1 == ap_sig_cseq_ST_st13_fsm_12) | (1'b1 == ap_sig_cseq_ST_st14_fsm_13) | (1'b1 == ap_sig_cseq_ST_st15_fsm_14) | (1'b1 == ap_sig_cseq_ST_st16_fsm_15) | (1'b1 == ap_sig_cseq_ST_st17_fsm_16) | (1'b1 == ap_sig_cseq_ST_st18_fsm_17) | (1'b1 == ap_sig_cseq_ST_st19_fsm_18) | (1'b1 == ap_sig_cseq_ST_st20_fsm_19) | (1'b1 == ap_sig_cseq_ST_st21_fsm_20) | (1'b1 == ap_sig_cseq_ST_st22_fsm_21) | (1'b1 == ap_sig_cseq_ST_st23_fsm_22) | (1'b1 == ap_sig_cseq_ST_st24_fsm_23) | (1'b1 == ap_sig_cseq_ST_st25_fsm_24) | (1'b1 == ap_sig_cseq_ST_st26_fsm_25) | (1'b1 == ap_sig_cseq_ST_st27_fsm_26) | (1'b1 == ap_sig_cseq_ST_st28_fsm_27) | (1'b1 == ap_sig_cseq_ST_st29_fsm_28) | (1'b1 == ap_sig_cseq_ST_st30_fsm_29) | (1'b1 == ap_sig_cseq_ST_st31_fsm_30) | (1'b1 == ap_sig_cseq_ST_st32_fsm_31) | (1'b1 == ap_sig_cseq_ST_st33_fsm_32) | (1'b1 == ap_sig_cseq_ST_st34_fsm_33) | (1'b1 == ap_sig_cseq_ST_st35_fsm_34) | (1'b1 == ap_sig_cseq_ST_st36_fsm_35) | (1'b1 == ap_sig_cseq_ST_st37_fsm_36) | (1'b1 == ap_sig_cseq_ST_st38_fsm_37) | (1'b1 == ap_sig_cseq_ST_st39_fsm_38) | (1'b1 == ap_sig_cseq_ST_st40_fsm_39))) begin
        array_r_ce0 = 1'b1;
    end else begin
        array_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        ap_ST_st15_fsm_14 : begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : begin
            ap_NS_fsm = ap_ST_st17_fsm_16;
        end
        ap_ST_st17_fsm_16 : begin
            ap_NS_fsm = ap_ST_st18_fsm_17;
        end
        ap_ST_st18_fsm_17 : begin
            ap_NS_fsm = ap_ST_st19_fsm_18;
        end
        ap_ST_st19_fsm_18 : begin
            ap_NS_fsm = ap_ST_st20_fsm_19;
        end
        ap_ST_st20_fsm_19 : begin
            ap_NS_fsm = ap_ST_st21_fsm_20;
        end
        ap_ST_st21_fsm_20 : begin
            ap_NS_fsm = ap_ST_st22_fsm_21;
        end
        ap_ST_st22_fsm_21 : begin
            ap_NS_fsm = ap_ST_st23_fsm_22;
        end
        ap_ST_st23_fsm_22 : begin
            ap_NS_fsm = ap_ST_st24_fsm_23;
        end
        ap_ST_st24_fsm_23 : begin
            ap_NS_fsm = ap_ST_st25_fsm_24;
        end
        ap_ST_st25_fsm_24 : begin
            ap_NS_fsm = ap_ST_st26_fsm_25;
        end
        ap_ST_st26_fsm_25 : begin
            ap_NS_fsm = ap_ST_st27_fsm_26;
        end
        ap_ST_st27_fsm_26 : begin
            ap_NS_fsm = ap_ST_st28_fsm_27;
        end
        ap_ST_st28_fsm_27 : begin
            ap_NS_fsm = ap_ST_st29_fsm_28;
        end
        ap_ST_st29_fsm_28 : begin
            ap_NS_fsm = ap_ST_st30_fsm_29;
        end
        ap_ST_st30_fsm_29 : begin
            ap_NS_fsm = ap_ST_st31_fsm_30;
        end
        ap_ST_st31_fsm_30 : begin
            ap_NS_fsm = ap_ST_st32_fsm_31;
        end
        ap_ST_st32_fsm_31 : begin
            ap_NS_fsm = ap_ST_st33_fsm_32;
        end
        ap_ST_st33_fsm_32 : begin
            ap_NS_fsm = ap_ST_st34_fsm_33;
        end
        ap_ST_st34_fsm_33 : begin
            ap_NS_fsm = ap_ST_st35_fsm_34;
        end
        ap_ST_st35_fsm_34 : begin
            ap_NS_fsm = ap_ST_st36_fsm_35;
        end
        ap_ST_st36_fsm_35 : begin
            ap_NS_fsm = ap_ST_st37_fsm_36;
        end
        ap_ST_st37_fsm_36 : begin
            ap_NS_fsm = ap_ST_st38_fsm_37;
        end
        ap_ST_st38_fsm_37 : begin
            ap_NS_fsm = ap_ST_st39_fsm_38;
        end
        ap_ST_st39_fsm_38 : begin
            ap_NS_fsm = ap_ST_st40_fsm_39;
        end
        ap_ST_st40_fsm_39 : begin
            ap_NS_fsm = ap_ST_st41_fsm_40;
        end
        ap_ST_st41_fsm_40 : begin
            ap_NS_fsm = ap_ST_st42_fsm_41;
        end
        ap_ST_st42_fsm_41 : begin
            if (~(1'b0 == exitcond1_fu_906_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st43_fsm_42;
            end
        end
        ap_ST_st43_fsm_42 : begin
            if (~(exitcond_fu_918_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st42_fsm_41;
            end else begin
                ap_NS_fsm = ap_ST_st44_fsm_43;
            end
        end
        ap_ST_st44_fsm_43 : begin
            ap_NS_fsm = ap_ST_st45_fsm_44;
        end
        ap_ST_st45_fsm_44 : begin
            ap_NS_fsm = ap_ST_st46_fsm_45;
        end
        ap_ST_st46_fsm_45 : begin
            ap_NS_fsm = ap_ST_st43_fsm_42;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

always @ (*) begin
    ap_sig_130 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_139 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_148 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_157 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

always @ (*) begin
    ap_sig_166 = (1'b1 == ap_CS_fsm[ap_const_lv32_5]);
end

always @ (*) begin
    ap_sig_175 = (1'b1 == ap_CS_fsm[ap_const_lv32_6]);
end

always @ (*) begin
    ap_sig_184 = (1'b1 == ap_CS_fsm[ap_const_lv32_7]);
end

always @ (*) begin
    ap_sig_193 = (1'b1 == ap_CS_fsm[ap_const_lv32_8]);
end

always @ (*) begin
    ap_sig_202 = (1'b1 == ap_CS_fsm[ap_const_lv32_9]);
end

always @ (*) begin
    ap_sig_211 = (1'b1 == ap_CS_fsm[ap_const_lv32_A]);
end

always @ (*) begin
    ap_sig_220 = (1'b1 == ap_CS_fsm[ap_const_lv32_B]);
end

always @ (*) begin
    ap_sig_229 = (1'b1 == ap_CS_fsm[ap_const_lv32_C]);
end

always @ (*) begin
    ap_sig_238 = (1'b1 == ap_CS_fsm[ap_const_lv32_D]);
end

always @ (*) begin
    ap_sig_247 = (1'b1 == ap_CS_fsm[ap_const_lv32_E]);
end

always @ (*) begin
    ap_sig_256 = (1'b1 == ap_CS_fsm[ap_const_lv32_F]);
end

always @ (*) begin
    ap_sig_265 = (1'b1 == ap_CS_fsm[ap_const_lv32_10]);
end

always @ (*) begin
    ap_sig_274 = (1'b1 == ap_CS_fsm[ap_const_lv32_11]);
end

always @ (*) begin
    ap_sig_283 = (1'b1 == ap_CS_fsm[ap_const_lv32_12]);
end

always @ (*) begin
    ap_sig_292 = (1'b1 == ap_CS_fsm[ap_const_lv32_13]);
end

always @ (*) begin
    ap_sig_301 = (1'b1 == ap_CS_fsm[ap_const_lv32_14]);
end

always @ (*) begin
    ap_sig_310 = (1'b1 == ap_CS_fsm[ap_const_lv32_15]);
end

always @ (*) begin
    ap_sig_319 = (1'b1 == ap_CS_fsm[ap_const_lv32_16]);
end

always @ (*) begin
    ap_sig_328 = (1'b1 == ap_CS_fsm[ap_const_lv32_17]);
end

always @ (*) begin
    ap_sig_337 = (1'b1 == ap_CS_fsm[ap_const_lv32_18]);
end

always @ (*) begin
    ap_sig_346 = (1'b1 == ap_CS_fsm[ap_const_lv32_19]);
end

always @ (*) begin
    ap_sig_355 = (1'b1 == ap_CS_fsm[ap_const_lv32_1A]);
end

always @ (*) begin
    ap_sig_364 = (1'b1 == ap_CS_fsm[ap_const_lv32_1B]);
end

always @ (*) begin
    ap_sig_373 = (1'b1 == ap_CS_fsm[ap_const_lv32_1C]);
end

always @ (*) begin
    ap_sig_382 = (1'b1 == ap_CS_fsm[ap_const_lv32_1D]);
end

always @ (*) begin
    ap_sig_391 = (1'b1 == ap_CS_fsm[ap_const_lv32_1E]);
end

always @ (*) begin
    ap_sig_400 = (1'b1 == ap_CS_fsm[ap_const_lv32_1F]);
end

always @ (*) begin
    ap_sig_409 = (1'b1 == ap_CS_fsm[ap_const_lv32_20]);
end

always @ (*) begin
    ap_sig_418 = (1'b1 == ap_CS_fsm[ap_const_lv32_21]);
end

always @ (*) begin
    ap_sig_427 = (1'b1 == ap_CS_fsm[ap_const_lv32_22]);
end

always @ (*) begin
    ap_sig_436 = (1'b1 == ap_CS_fsm[ap_const_lv32_23]);
end

always @ (*) begin
    ap_sig_445 = (1'b1 == ap_CS_fsm[ap_const_lv32_24]);
end

always @ (*) begin
    ap_sig_454 = (1'b1 == ap_CS_fsm[ap_const_lv32_25]);
end

always @ (*) begin
    ap_sig_463 = (1'b1 == ap_CS_fsm[ap_const_lv32_26]);
end

always @ (*) begin
    ap_sig_472 = (1'b1 == ap_CS_fsm[ap_const_lv32_27]);
end

always @ (*) begin
    ap_sig_481 = (1'b1 == ap_CS_fsm[ap_const_lv32_29]);
end

always @ (*) begin
    ap_sig_490 = (1'b1 == ap_CS_fsm[ap_const_lv32_2A]);
end

always @ (*) begin
    ap_sig_508 = (1'b1 == ap_CS_fsm[ap_const_lv32_2B]);
end

always @ (*) begin
    ap_sig_519 = (1'b1 == ap_CS_fsm[ap_const_lv32_2C]);
end

always @ (*) begin
    ap_sig_529 = (1'b1 == ap_CS_fsm[ap_const_lv32_28]);
end

always @ (*) begin
    ap_sig_544 = (1'b1 == ap_CS_fsm[ap_const_lv32_2D]);
end

always @ (*) begin
    ap_sig_63 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

assign exitcond1_fu_906_p2 = ((i_reg_884 == ap_const_lv6_27) ? 1'b1 : 1'b0);

assign exitcond_fu_918_p2 = ((j_reg_895 == indvars_iv_reg_872) ? 1'b1 : 1'b0);

assign i_1_fu_912_p2 = (i_reg_884 + ap_const_lv6_1);

assign indvars_iv_next_fu_935_p2 = ($signed(indvars_iv_reg_872) + $signed(ap_const_lv6_3F));

assign j_1_fu_924_p2 = (j_reg_895 + ap_const_lv6_1);

assign tmp_3_fu_930_p1 = j_reg_895;

assign tmp_5_fu_941_p1 = j_1_reg_1161;

assign tmp_6_fu_945_p2 = (($signed(temporal_reg_1177) > $signed(array_out_q0)) ? 1'b1 : 1'b0);

endmodule //bubble_sort
